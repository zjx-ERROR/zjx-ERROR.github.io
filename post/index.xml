<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Turtle Titan</title>
    <link>https://zjx-ERROR.github.io/post/</link>
    <description>Recent content in Posts on Turtle Titan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Nov 2023 00:35:31 +0800</lastBuildDate><atom:link href="https://zjx-ERROR.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang进阶技巧</title>
      <link>https://zjx-ERROR.github.io/post/golangtip/</link>
      <pubDate>Wed, 01 Nov 2023 00:35:31 +0800</pubDate>
      
      <guid>https://zjx-ERROR.github.io/post/golangtip/</guid>
      <description>1. 值传递还是引用传递 Go函数的参数始终按值传递。
当结构体（或数组）类型的变量传递给函数时，整个结构都会被复制。
如果传递的是结构体指针，则复制的是指针，占8字节内存大小（64位系统），它指向的结构体不会被复制。
这是否意味着传递结构体指针会更好吗？
传递指针的结构体会被放置在堆内存中，而不是栈中。
如果动态分配的结构体占用多于直接传递，那么将它复制到栈中会更快：
package test import ( &amp;#34;os&amp;#34; &amp;#34;runtime/trace&amp;#34; &amp;#34;testing&amp;#34; ) type S struct { a, b, c int64 d, e, f string g, h, i float64 } func byValue() S { return S{ a: 1, b: 1, c: 1, d: &amp;#34;foo&amp;#34;, e: &amp;#34;bar&amp;#34;, f: &amp;#34;baz&amp;#34;, g: 1.0, h: 1.0, i: 1.0, } } func byReference() *S { return &amp;amp;S{ a: 1, b: 1, c: 1, d: &amp;#34;foo&amp;#34;, e: &amp;#34;bar&amp;#34;, f: &amp;#34;baz&amp;#34;, g: 1.</description>
    </item>
    
  </channel>
</rss>
