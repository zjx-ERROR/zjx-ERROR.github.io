[{"categories":["Golang"],"contents":"1. 值传递还是引用传递 Go函数的参数始终按值传递。\n当结构体（或数组）类型的变量传递给函数时，整个结构都会被复制。\n如果传递的是结构体指针，则复制的是指针，占8字节内存大小（64位系统），它指向的结构体不会被复制。\n这是否意味着传递结构体指针会更好吗？\n传递指针的结构体会被放置在堆内存中，而不是栈中。\n如果动态分配的结构体占用多于直接传递，那么将它复制到栈中会更快：\npackage test import ( \u0026#34;os\u0026#34; \u0026#34;runtime/trace\u0026#34; \u0026#34;testing\u0026#34; ) type S struct { a, b, c int64 d, e, f string g, h, i float64 } func byValue() S { return S{ a: 1, b: 1, c: 1, d: \u0026#34;foo\u0026#34;, e: \u0026#34;bar\u0026#34;, f: \u0026#34;baz\u0026#34;, g: 1.0, h: 1.0, i: 1.0, } } func byReference() *S { return \u0026amp;S{ a: 1, b: 1, c: 1, d: \u0026#34;foo\u0026#34;, e: \u0026#34;bar\u0026#34;, f: \u0026#34;baz\u0026#34;, g: 1.0, h: 1.0, i: 1.0, } } func BenchmarkByValue(b *testing.B) { var s S f, err := os.Create(\u0026#34;stack.out\u0026#34;) if err != nil { b.Fatal(err) } defer f.Close() err = trace.Start(f) if err != nil { b.Fatal(err) } for i := 0; i \u0026lt; b.N; i++ { s = byValue() } trace.Stop() b.StopTimer() _ = s } func BenchmarkByReference(b *testing.B) { var s *S f, err := os.Create(\u0026#34;heap.out\u0026#34;) if err != nil { b.Fatal(err) } defer f.Close() err = trace.Start(f) if err != nil { b.Fatal(err) } for i := 0; i \u0026lt; b.N; i++ { s = byReference() } trace.Stop() b.StopTimer() _ = s } 让我们运行benchmarks：\nBenchmarkByValue-6 353830330\t3.368 ns/op\t0 B/op\t0 allocs/op\nBenchmarkByReference-6 21056649\t53.82 ns/op\t96 B/op\t1 allocs/op\n可以看出，当结构体通过值传递，不涉及动态分配或垃圾回收器，会更快。\n为了理解原因，让我们看一下trace生成的图表。\nBenchmarkByValue: BenchmarkByReference: 第一张图非常简单。由于没有使用堆，因此没有垃圾收集器。\n对于第二张图，指针的使用迫使go编译器将变量逃逸到堆上，并且给垃圾收集器施加压力。\n总之，不要假设值传递会很慢，如果关注性能，可以使用go profiler。\n","date":"2023-11-01T00:35:31+08:00","permalink":"https://zjx-ERROR.github.io/post/golangtip/","section":"post","tags":null,"title":"Golang技巧"},{"categories":null,"contents":"","date":"2023-10-30T00:02:53+08:00","permalink":"https://zjx-ERROR.github.io/about/","section":"","tags":null,"title":"About Me"},{"categories":["Guide"],"contents":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don’t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren’t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo’s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015.\n","date":"2023-02-16T18:58:11+08:00","permalink":"https://zjx-ERROR.github.io/post/markdown_syntax_guide/","section":"post","tags":null,"title":"Markdown Syntax Guide"}]